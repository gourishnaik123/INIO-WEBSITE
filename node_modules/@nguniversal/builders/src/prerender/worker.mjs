/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as fs from 'fs';
import * as path from 'path';
import { workerData } from 'worker_threads';
import { loadEsmModule } from '../utils/utils';
/**
 * The fully resolved path to the zone.js package that will be loaded during worker initialization.
 * This is passed as workerData when setting up the worker via the `piscina` package.
 */
const { zonePackage } = workerData;
/**
 * Renders each route in routes and writes them to <outputPath>/<route>/index.html.
 */
function render({ indexFile, deployUrl, minifyCss, outputPath, serverBundlePath, route, inlineCriticalCss, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = {};
        const browserIndexOutputPath = path.join(outputPath, indexFile);
        const outputFolderPath = path.join(outputPath, route);
        const outputIndexPath = path.join(outputFolderPath, 'index.html');
        const { AppServerModule, renderModule } = (yield import(serverBundlePath));
        if (!renderModule) {
            throw new Error(`renderModule was not exported from: ${serverBundlePath}.`);
        }
        if (!AppServerModule) {
            throw new Error(`AppServerModule was not exported from: ${serverBundlePath}.`);
        }
        const indexBaseName = fs.existsSync(path.join(outputPath, 'index.original.html'))
            ? 'index.original.html'
            : indexFile;
        const browserIndexInputPath = path.join(outputPath, indexBaseName);
        let document = yield fs.promises.readFile(browserIndexInputPath, 'utf8');
        document = document.replace('</html>', '<!-- This page was prerendered with Angular Universal -->\n</html>');
        if (inlineCriticalCss) {
            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
            document = document.replace(/ media="print" onload="this\.media='all'"><noscript><link .+?><\/noscript>/g, '>');
        }
        let html = yield renderModule(AppServerModule, {
            document,
            url: route,
        });
        if (inlineCriticalCss) {
            const inlineCriticalCssProcessor = new InlineCriticalCssProcessor({
                deployUrl: deployUrl,
                minify: minifyCss,
            });
            const { content, warnings, errors } = yield inlineCriticalCssProcessor.process(html, {
                outputPath,
            });
            result.errors = errors;
            result.warnings = warnings;
            html = content;
        }
        // This case happens when we are prerendering "/".
        if (browserIndexOutputPath === outputIndexPath) {
            const browserIndexOutputPathOriginal = path.join(outputPath, 'index.original.html');
            fs.renameSync(browserIndexOutputPath, browserIndexOutputPathOriginal);
        }
        fs.mkdirSync(outputFolderPath, { recursive: true });
        fs.writeFileSync(outputIndexPath, html);
        return result;
    });
}
let InlineCriticalCssProcessor;
/**
 * Initializes the worker when it is first created by loading the Zone.js package
 * into the worker instance.
 *
 * @returns A promise resolving to the render function of the worker.
 */
function initialize() {
    return __awaiter(this, void 0, void 0, function* () {
        const { ɵInlineCriticalCssProcessor } = yield loadEsmModule('@nguniversal/common/tools');
        InlineCriticalCssProcessor = ɵInlineCriticalCssProcessor;
        // Setup Zone.js
        yield import(zonePackage);
        // Return the render function for use
        return render;
    });
}
/**
 * The default export will be the promise returned by the initialize function.
 * This is awaited by piscina prior to using the Worker.
 */
export default initialize();
//# sourceMappingURL=data:application/json;base64,